!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){e.exports=n(7)},function(e,t,n){var i=n(2),o=n(3);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1};i(o,r);e.exports=o.locals||{}},function(e,t,n){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function a(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},i=[],o=0;o<e.length;o++){var r=e[o],l=t.base?r[0]+t.base:r[0],c=n[l]||0,u="".concat(l," ").concat(c);n[l]=c+1;var d=a(u),h={css:r[1],media:r[2],sourceMap:r[3]};-1!==d?(s[d].references++,s[d].updater(h)):s.push({identifier:u,updater:g(h,t),references:1}),i.push(u)}return i}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var s=r(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function h(e,t,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var r=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(r,s[t]):e.appendChild(r)}}function p(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,m=0;function g(e,t){var n,i,o;if(t.singleton){var r=m++;n=f||(f=c(t)),i=h.bind(null,n,r,!1),o=h.bind(null,n,r,!0)}else n=c(t),i=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=a(n[i]);s[o].references--}for(var r=l(e,t),c=0;c<n.length;c++){var u=a(n[c]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}n=r}}}},function(e,t,n){var i=n(4),o=n(5),r=n(6);t=i(!1);var s=o(r);t.push([e.i,"body{margin:0}a{text-decoration:none;color:inherit}ul{margin:0;padding:0;list-style:none}blockquote{margin:0}p{margin:0}:root{--color-night: #052957;--color-sunset: #7E88B2;--color-sunrise: #788692;--color-text: #2B2B2B;--color-white: #F7F7F7;--wheel-rotation: 0deg}@font-face{font-family:'Spart';src:url("+s+")}@font-face{font-family:'Spart';src:url("+s+")}body{font-family:'Spart', serif;font-variation-settings:'wght' 100, 'wdth' 130;color:var(--color-text);font-size:1.125rem}@media screen and (min-width: 768px){body{font-size:1.3125rem}}h1,h2,h3{margin:0 0 6px 0}@media screen and (min-width: 768px){h1,h2,h3{margin:0 0 12px 0}}h1{font-family:'Spart', serif;font-variation-settings:'wght' 300, 'wdth' 300;font-size:2.25rem;margin:0 0 6px 0}@media screen and (min-width: 768px){h1{font-size:2.6875rem}}h2,h3{font-family:'Spart', serif;font-variation-settings:'wght' 300, 'wdth' 100}h2{font-size:1.875rem}@media screen and (min-width: 768px){h2{font-size:2.25rem}}h3{font-size:1.5625rem;margin-top:24px}@media screen and (min-width: 768px){h3{font-size:1.875rem;margin-top:30px}}.bold{font-variation-settings:'wght' 100, 'wdth' 175}.light{font-variation-settings:'wght' 100, 'wdth' 100}body{padding:30px 30px 120px}@media screen and (min-width: 768px){body{padding:60px 60px 240px}}@media screen and (min-width: 1024px){body{padding:120px 120px 120px 360px}}section,footer{margin-top:36px}@media screen and (min-width: 768px){section,footer{margin-top:48px}}footer{text-align:center;font-size:1rem}blockquote{margin:12px 0}h1+blockquote{margin:0}blockquote p{font-variation-settings:'wght' 100, 'wdth' 300;white-space:pre-line;position:relative;display:inline-block}blockquote p::before,blockquote p::after{position:absolute;color:var(--color-text);transition:background 2s linear,color 2s linear}blockquote p::before{content:\"«\";top:0;left:-12px}@media screen and (min-width: 768px){blockquote p::before{left:-24px}}blockquote p::after{content:\"»\";bottom:0;right:-12px}@media screen and (min-width: 768px){blockquote p::after{right:-24px}}ul{margin:12px 0}ul li{position:relative}ul li::before{content:'—';position:absolute;left:-18px}@media screen and (min-width: 768px){ul li::before{left:-24px}}@media screen and (min-width: 768px){ul{margin:18px 0}}.sib-form{padding:0;font-family:'Spart', serif;font-variation-settings:'wght' 100, 'wdth' 130;margin-top:18px}#sib-container{padding:0;background:transparent}#sib-container .sib-input{padding:0}#sib-container .sib-input .entry__field{margin:0;background:transparent;border:0}#sib-container .sib-input .entry__field .input{padding:6px 12px;border:1px solid var(--color-text);border-radius:2px;transition:border 2s linear}@media screen and (min-width: 768px){#sib-container .sib-input .entry__field .input{padding:6px 24px}}#sib-container .sib-input .entry__specification{margin:6px 0 0;font-size:.875rem;color:var(--color-text);transition:background 2s linear,color 2s linear}#sib-container .sib-form-block{padding:18px 0 0}#sib-container .sib-form-block__button{width:100%;border:0;background-color:var(--color-text);color:var(--color-sunrise);font-family:'Spart', serif;font-variation-settings:'wght' 300, 'wdth' 300;font-size:1.125rem;cursor:pointer;transition:all .3s ease-out}#sib-container .sib-form-block__button:hover,#sib-container .sib-form-block__button:focus{background-color:var(--color-white);color:var(--color-text)}#sib-container input:-ms-input-placeholder{text-align:left;border-width:px;color:var(--color-text);transition:background 2s linear,color 2s linear;opacity:.5}#sib-container input::placeholder{text-align:left;border-width:px;color:var(--color-text);transition:background 2s linear,color 2s linear;opacity:.5}.js-background{transition:background 2s linear,color 2s linear}.js-sunset{background:var(--color-sunset)}.js-night{background:var(--color-night)}.js-sunrise{background:var(--color-sunrise)}.wheel{position:fixed;bottom:0;left:0;height:120px;width:100vw;overflow:hidden;box-shadow:0 -200px 30px -100px var(--color-sunset) inset;transition:all 2s linear}@media screen and (min-width: 768px){.wheel{height:180px}}@media screen and (min-width: 1024px){.wheel{height:100vh;width:300px;top:0;box-shadow:none}}.wheel__circle{position:absolute;top:230%;left:50%;transform:translate(-50%, -50%) rotate(var(--wheel-rotation));height:360px;width:360px;border-radius:100%;border:1px solid var(--color-text);transition:border 2s linear,transform 2s linear}@media screen and (min-width: 768px){.wheel__circle{top:180%}}@media screen and (min-width: 1024px){.wheel__circle{top:50%;left:0;transform:translate(-50%, -50%) rotate(var(--wheel-rotation))}}.wheel__element{position:absolute;top:12px;left:0;width:60px;display:flex;flex-direction:column-reverse;align-items:center;transform:translate(-50%, -100%) rotate(calc(var(--wheel-rotation) * -1));transition:transform 2s linear}@media screen and (min-width: 1024px){.wheel__element{flex-direction:row;width:auto;height:72px;top:0}}.wheel__element--night{left:50%;top:2px}@media screen and (min-width: 1024px){.wheel__element--night{top:-37px}}.wheel__element--sunset{left:33%}@media screen and (min-width: 1024px){.wheel__element--sunset{left:20%}}.wheel__element--sunrise{left:66%}@media screen and (min-width: 1024px){.wheel__element--sunrise{left:80%}}.wheel__point{background:var(--color-text);border-radius:100%;width:6px;height:6px;transition:background 2s linear,color 2s linear}.wheel__image{height:36px;object-fit:contain;object-position:center;margin-bottom:12px}@media screen and (min-width: 1024px){.wheel__image{margin-bottom:0;margin-left:24px;width:120px;height:100%}}.js-sunset .wheel{box-shadow:0 -200px 30px -100px var(--color-sunset) inset}@media screen and (min-width: 1024px){.js-sunset .wheel{box-shadow:none}}.js-sunrise .wheel{box-shadow:0 -200px 30px -100px var(--color-sunrise) inset}@media screen and (min-width: 1024px){.js-sunrise .wheel{box-shadow:none}}.js-night .wheel{box-shadow:0 -200px 30px -100px var(--color-night) inset}@media screen and (min-width: 1024px){.js-night .wheel{box-shadow:none}}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(s=i,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(l," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([o]).join("\n")}var s,a,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);i&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,n){"use strict";n.r(t),t.default=n.p+"6bb6a49cebba45362f57225cc737a1d3.ttf"},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.r(t);var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.steps={},this.sunsetAngle=15,this.nightAngle=0,this.sunriseAngle=-15}var t,n,o;return t=e,(n=[{key:"init",value:function(e){this.steps=e}},{key:"rotateWheel",value:function(e){console.log(window.screen),e>=this.steps.sunriseStep?window.screen.availWidth>=1024?document.documentElement.style.setProperty("--wheel-rotation",this.sunriseAngle+90+"deg"):document.documentElement.style.setProperty("--wheel-rotation",this.sunriseAngle+"deg"):e>=this.steps.sunsetStep?(window.screen.availWidth>=1024?document.documentElement.style.setProperty("--wheel-rotation",this.nightAngle+90+"deg"):document.documentElement.style.setProperty("--wheel-rotation",this.nightAngle+"deg"),console.log("night")):(window.screen.availWidth>=1024?document.documentElement.style.setProperty("--wheel-rotation",this.sunsetAngle+90+"deg"):document.documentElement.style.setProperty("--wheel-rotation",this.sunsetAngle+"deg"),console.log("sunset"))}},{key:"nightRotation",value:function(){window.screen.availWidth>=1024?document.documentElement.style.setProperty("--wheel-rotation",this.nightAngle+90+"deg"):document.documentElement.style.setProperty("--wheel-rotation",this.nightAngle+"deg")}},{key:"sunsetRotation",value:function(){window.screen.availWidth>=1024?document.documentElement.style.setProperty("--wheel-rotation",this.sunsetAngle+90+"deg"):document.documentElement.style.setProperty("--wheel-rotation",this.sunsetAngle+"deg")}},{key:"sunriseRotation",value:function(){window.screen.availWidth>=1024?document.documentElement.style.setProperty("--wheel-rotation",this.sunriseAngle+90+"deg"):document.documentElement.style.setProperty("--wheel-rotation",this.sunriseAngle+"deg")}}])&&i(t.prototype,n),o&&i(t,o),e}();function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.lat="50.8466",this.lng="4.3528",this.apiURL="https://api.sunrise-sunset.org/json?lat="+this.lat+"&lng="+this.lng+"&formatted=0",this.containerHTML=document.querySelector(".js-background"),this.onePartHeight=document.body.clientHeight/24,this.sunsetHours=19,this.sunriseHours=4,this.sunsetStep=this.sunsetHours*this.onePartHeight,this.sunriseStep=this.sunriseHours*this.onePartHeight,this.cycleWheel=t}var t,n,i;return t=e,(n=[{key:"init",value:function(){this.setLatLng(),this.setResizeEventListener();var e=this;fetch(this.apiURL).then((function(e){return e.json()})).then((function(t){console.log(t);var n=t.results.sunrise;e.sunriseHours=24-e.getHours(new Date(n));var i=t.results.sunset;e.sunsetHours=24-e.getHours(new Date(i)),e.sunriseStep=e.sunriseHours*e.onePartHeight,e.sunsetStep=e.sunsetHours*e.onePartHeight,e.cycleWheel.init({sunsetStep:e.sunsetStep,sunriseStep:e.sunriseStep}),e.setNightOrDay(window.pageYOffset+window.innerHeight/2),e.cycleWheel.rotateWheel(window.pageYOffset+window.innerHeight/2),console.log(e.sunriseHours,e.sunriseStep,e.sunsetHours,e.sunsetStep),e.setScrollEventListener()})).catch((function(t){console.error("Il y a eu un problème lors de l'excecution du Fetch : "+t),e.cycleWheel.init({sunsetStep:e.sunsetStep,sunriseStep:e.sunriseStep}),e.setNightOrDay(window.pageYOffset+window.innerHeight/2),e.cycleWheel.rotateWheel(window.pageYOffset+window.innerHeight/2),e.setScrollEventListener()}))}},{key:"setLatLng",value:function(){var e=this;"geolocation"in navigator&&navigator.geolocation.getCurrentPosition((function(t){e.lat=t.coords.latitude,e.lng=t.coords.longitude}))}},{key:"setNightOrDay",value:function(e){e>=this.sunriseStep?(console.log("day"),this.containerHTML.classList.add("js-sunrise"),document.documentElement.style.setProperty("--color-text","#2B2B2B"),this.cycleWheel.sunriseRotation(),this.containerHTML.classList.remove("js-night")):e>=this.sunsetStep?(console.log("night"),this.containerHTML.classList.add("js-night"),document.documentElement.style.setProperty("--color-text","#F7F7F7"),this.cycleWheel.nightRotation(),this.containerHTML.classList.remove("js-sunset"),this.containerHTML.classList.remove("js-sunrise")):(console.log("day"),this.containerHTML.classList.add("js-sunset"),document.documentElement.style.setProperty("--color-text","#2B2B2B"),this.cycleWheel.sunsetRotation(),this.containerHTML.classList.remove("js-night"))}},{key:"setResizeEventListener",value:function(){var e=this;window.addEventListener("resize",(function(t){setTimeout(e.resizeFunction(),250)}))}},{key:"setScrollEventListener",value:function(){var e=this;window.addEventListener("scroll",(function(t){e.setNightOrDay(window.pageYOffset+window.innerHeight/2)}))}},{key:"resizeFunction",value:function(){this.onePartHeight=document.body.clientHeight/24,this.sunriseStep=this.sunriseHours*this.onePartHeight,this.sunsetStep=this.sunsetHours*this.onePartHeight}},{key:"getHours",value:function(e){var t=e.getUTCHours();return e.getUTCMinutes()>=40?t+1:t}}])&&r(t.prototype,n),i&&r(t,i),e}();n(1),new s(new o).init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,