!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){n(2),t.exports=n(1)},function(t,e,n){"use strict";n.r(e),e.default=n.p+"assets/styles/app.min.css"},function(t,e,n){"use strict";function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}n.r(e);var s=function(){function t(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];o(this,t),this.posY=window.scrollY,this.frame,this.activeSection=0,this.oldSection=0,this.black="#2B2B2B",this.blackAlpha="#2B2B2B85",this.white="#F7F7F7",this.contentElements=document.querySelectorAll(".frame-content"),this.contentSections=document.querySelectorAll(".frame-section"),this.startY=this.contentSections[0].offsetTop,this.contentLastSection=this.contentSections[this.contentSections.length-1].querySelectorAll(".frame-content");var n=0;this.contentLastSection.forEach((function(t){n+=t.clientHeight})),this.endY=this.contentSections[this.contentSections.length-1].offsetTop+this.contentSections[this.contentSections.length-1].offsetHeight-n,console.log(this.isIpad())}var e,n,s;return e=t,(n=[{key:"init",value:function(){this.contentElements.forEach((function(t){t.classList.add("frame-content--hidden")})),this.frame=this.createHTMLNodeFrame(),this.isIpad()||(this.endY-=this.frame.offsetHeight),console.log(this.startY,this.endY),window.addEventListener("scroll",function(){var t=this;this.setPosY(window.scrollY+window.innerHeight/2),this.posY>=this.startY&&this.posY<=this.endY?(this.frame.classList.add("frame--fixed"),document.body.classList.add("frame-active"),window.outerWidth<1024&&document.documentElement.style.setProperty("--color-text",this.white),this.contentSections.forEach((function(e,n){t.posY>=e.offsetTop&&t.posY<=e.offsetTop+e.offsetHeight&&(t.activeSection=n)})),this.activeSection<this.contentElements.length&&(this.oldSection!==this.activeSection&&(this.contentElements[this.oldSection].classList.remove("frame-content--active"),this.oldSection=this.activeSection),this.contentElements[this.activeSection].classList.add("frame-content--active"))):(this.posY,this.endY,document.body.classList.remove("frame-active"),this.contentElements[this.oldSection].classList.remove("frame-content--active"),this.frame.classList.remove("frame--fixed"),document.documentElement.style.setProperty("--color-text",this.black))}.bind(this))}},{key:"setPosY",value:function(t){this.posY=t}},{key:"createHTMLNodeFrame",value:function(){var t=document.createElement("div");t.classList.add("frame");var e=document.createElement("div");return e.classList.add("frame__bg"),t.appendChild(e),t.innerHTML+='<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 393 680" class="svg-responsive frame__svg">\n        <g fill="none" fill-rule="evenodd" transform="translate(0 1)"><path fill="#2B2B2B" d="M353 0c22.09139 0 40 17.90861 40 40v598c0 22.09139-17.90861 40-40 40H40c-22.09139 0-40-17.90861-40-40V40C0 17.90861 17.90861 0 40 0h313zm-13 18H54c-22.09139 0-40 17.90861-40 40v550c0 22.09139 17.90861 40 40 40h286c22.09139 0 40-17.90861 40-40V58c0-22.09139-17.90861-40-40-40z"/><path fill="#F7F7F7" fill-opacity=".25" d="M14 608c0 22.09139 17.90861 40 40 40h286c22.09139 0 40-17.90861 40-40v12c0 22.09139-17.90861 40-40 40H54c-22.09139 0-40-17.90861-40-40z"/><rect width="366" height="630" x="14" y="18" stroke="#000" stroke-width="3" rx="40"/></g>\n    </svg>',document.querySelector("main").appendChild(t),t}},{key:"isIpad",value:function(){return!(!/iPad/.test(navigator.userAgent)||window.MSStream)}}])&&i(e.prototype,n),s&&i(e,s),t}();function c(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var r=new(function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,o;return e=t,(n=[{key:"init",value:function(){document.body.classList.add("loader")}},{key:"destroy",value:function(){document.body.classList.add("loader--hidden"),document.body.addEventListener("transitionend",(function(t){document.body.classList.remove("loader"),document.body.classList.remove("loader--hidden")}))}}])&&c(e.prototype,n),o&&c(e,o),t}());r.init(),window.addEventListener("load",(function(){var t=document.querySelector(".experience");new s(t).init(),window.setTimeout((function(){r.destroy()}),500)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9zYXNzL2FwcC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1NjcmVlbkZyYW1lLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Mb2FkZXIuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJTY3JlZW5GcmFtZSIsIkhUTUxOb2RlU3RhcnQiLCJ0aGlzIiwicG9zWSIsIndpbmRvdyIsInNjcm9sbFkiLCJmcmFtZSIsImFjdGl2ZVNlY3Rpb24iLCJvbGRTZWN0aW9uIiwiYmxhY2siLCJibGFja0FscGhhIiwid2hpdGUiLCJjb250ZW50RWxlbWVudHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb250ZW50U2VjdGlvbnMiLCJzdGFydFkiLCJvZmZzZXRUb3AiLCJjb250ZW50TGFzdFNlY3Rpb24iLCJsZW5ndGgiLCJlbGVtZW50c1RvdGFsSGVpZ2h0IiwiZm9yRWFjaCIsImVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJlbmRZIiwib2Zmc2V0SGVpZ2h0IiwiY29uc29sZSIsImxvZyIsImlzSXBhZCIsImNsYXNzTGlzdCIsImFkZCIsImNyZWF0ZUhUTUxOb2RlRnJhbWUiLCJhZGRFdmVudExpc3RlbmVyIiwic2V0UG9zWSIsImlubmVySGVpZ2h0IiwiYm9keSIsIm91dGVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsInNldFByb3BlcnR5Iiwic2VjdGlvbiIsImluZGV4IiwicmVtb3ZlIiwidmFsIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsImJnIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJxdWVyeVNlbGVjdG9yIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIk1TU3RyZWFtIiwibG9hZGVyIiwiZXZlbnQiLCJpbml0IiwiSFRNTE5vZGVFeHBlcmllbmNlIiwic2V0VGltZW91dCIsImRlc3Ryb3kiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJC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eUIsRUFBcUI1QyxTQUFTb0MsY0FBYyxlQUM5QixJQUFJakQsRUFBWXlELEdBQ3hCRCxPQUdacEQsT0FBT3NELFlBQVcsV0FDZEosRUFBT0ssWUFDUiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9zdHlsZXMvYXBwLm1pbi5jc3NcIjsiLCIvKlxuICogVE9ETyA6XG4gKiAtIE9uIHJlc2l6ZVxuICogLSBhbmltYXRpb24gc3ZnXG4gKiAtIGFtw6lsaW9yZXIgbG9uZ3VldXIgdmlzaWJpbGl0w6kgYW5pbWF0aW9uXG4gKiAtIFJldm9pciBhcHBhcml0aW9uIGRlcyBTVkdcbiovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmVlbkZyYW1lIHtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkaWZmZXJlbnQgdmFyaWFibGVzIG9mIHRoZSBjbGFzc1xuICAgICAqIFxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gSFRNTE5vZGVTdGFydCBUaGUgSFRNTCBFbGVtZW50IHdoZXJlIHRoZSBzY3JlZW4gZnJhbWUgbXVzdCBiZSBmaXhlZFxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gW0hUTUxOb2RlRW5kID0gbnVsbF0gVGhlIEhUTUwgRWxlbWVudCB3aGVyZSB0aGUgc2NyZWVuIGZyYW1lIG11c3QgYmUgdW5maXhlZFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKEhUTUxOb2RlU3RhcnQsIEhUTUxOb2RlRW5kID0gbnVsbCkge1xuICAgICAgICB0aGlzLnBvc1kgPSB3aW5kb3cuc2Nyb2xsWTtcbiAgICAgICAgdGhpcy5mcmFtZTtcbiAgICAgICAgdGhpcy5hY3RpdmVTZWN0aW9uID0gMDtcbiAgICAgICAgdGhpcy5vbGRTZWN0aW9uID0gMDtcblxuICAgICAgICB0aGlzLmJsYWNrID0gXCIjMkIyQjJCXCI7XG4gICAgICAgIHRoaXMuYmxhY2tBbHBoYSA9IFwiIzJCMkIyQjg1XCI7XG4gICAgICAgIHRoaXMud2hpdGUgPSBcIiNGN0Y3RjdcIjtcblxuICAgICAgICAvLyBHZXQgYWxsIHRoZSBpbWFnZXMgYW5kIHNlY3Rpb25zIG9mIHRoZSBzY3JvbGwgYW5pbWF0aW9uXG4gICAgICAgIHRoaXMuY29udGVudEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZyYW1lLWNvbnRlbnQnKTtcbiAgICAgICAgdGhpcy5jb250ZW50U2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZnJhbWUtc2VjdGlvbicpO1xuXG4gICAgICAgIC8vIEdldCB0b3RhbCBoZWlnaHRzIG9mIGFsbCB0aGUgY29udGVudCBpbWFnZXNcbiAgICAgICAgLy8gbGV0IGVsZW1lbnRzVG90YWxIZWlnaHQgPSAwO1xuICAgICAgICAvLyB0aGlzLmNvbnRlbnRFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAvLyAgICAgZWxlbWVudHNUb3RhbEhlaWdodCArPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKGVsZW1lbnQuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgdGhpcy5zdGFydFkgPSB0aGlzLmNvbnRlbnRTZWN0aW9uc1swXS5vZmZzZXRUb3A7XG4gICAgICAgIC8vIC8vIElmIHRoZSBwYXJhbWV0ZXIgSFRNTE5vZGVFbmQgaXMgc2V0XG4gICAgICAgIC8vIGlmKEhUTUxOb2RlRW5kKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmVuZFkgPSBIVE1MTm9kZUVuZC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gZWxzZSB7XG4gICAgICAgIC8vICAgICAvLyBJZiBub3QsIHVzZSB0aGUgYm90dG9tIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IEhUTUxOb2RlU3RhcnRcbiAgICAgICAgLy8gICAgIHRoaXMuZW5kWSA9IEhUTUxOb2RlU3RhcnQub2Zmc2V0VG9wICsgSFRNTE5vZGVTdGFydC5vZmZzZXRIZWlnaHQgLSBlbGVtZW50c1RvdGFsSGVpZ2h0O1xuICAgICAgICAvLyB9XG4gICAgICAgIHRoaXMuY29udGVudExhc3RTZWN0aW9uID0gdGhpcy5jb250ZW50U2VjdGlvbnNbdGhpcy5jb250ZW50U2VjdGlvbnMubGVuZ3RoLTFdLnF1ZXJ5U2VsZWN0b3JBbGwoJy5mcmFtZS1jb250ZW50Jyk7XG4gICAgICAgIGxldCBlbGVtZW50c1RvdGFsSGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5jb250ZW50TGFzdFNlY3Rpb24uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnRzVG90YWxIZWlnaHQgKz0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVuZFkgPSB0aGlzLmNvbnRlbnRTZWN0aW9uc1t0aGlzLmNvbnRlbnRTZWN0aW9ucy5sZW5ndGgtMV0ub2Zmc2V0VG9wICsgdGhpcy5jb250ZW50U2VjdGlvbnNbdGhpcy5jb250ZW50U2VjdGlvbnMubGVuZ3RoLTFdLm9mZnNldEhlaWdodCAtIGVsZW1lbnRzVG90YWxIZWlnaHQ7XG5cbiAgICAgICAgY29uc29sZS5sb2codGhpcy5pc0lwYWQoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGlkZSBhbGwgdGhlIGltYWdlc1xuICAgICAqIENyZWF0ZSB0aGUgbm9kZSB3aXRoIHRoZSBmcmFtZSBvZiB0aGUgc2NyZWVuXG4gICAgICogU2V0cyB0aGUgZXZlbnQgbGlzdGVuZXIgb24gdGhlIHNjcm9sbFxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIC8vIEFkZCB0aGUgY2xhc3MgdG8gaGlkZSBpbWFnZXNcbiAgICAgICAgdGhpcy5jb250ZW50RWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZnJhbWUtY29udGVudC0taGlkZGVuJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZnJhbWUgPSB0aGlzLmNyZWF0ZUhUTUxOb2RlRnJhbWUoKTtcbiAgICAgICAgLy8gVXBkYXRlIHRoaXMuZW5kWVxuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYW4gaVBhZCwgdGhlIGNhbGN1bGF0aW9uIG9mIHRoZSBoZWlnaHRcbiAgICAgICAgLy8gYWN0aW5nIGRpZmZlcmVudGx5LiBObyBuZWVkIHRvIHN1YnRyYWN0IHRoZSBoZWlnaHRcbiAgICAgICAgLy8gb2YgdGhlIGZyYW1lXG4gICAgICAgIGlmKCF0aGlzLmlzSXBhZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmVuZFkgLT0gdGhpcy5mcmFtZS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy90aGlzLmZyYW1lLnN0eWxlLnRvcCA9IHRoaXMuc3RhcnRZICsgJ3B4JzsgLy8gU2V0IHRoZSBwb3NpdGlvbiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBIVE1MIGVsZW1lbnRcblxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnN0YXJ0WSwgdGhpcy5lbmRZKTtcblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBvc1kod2luZG93LnNjcm9sbFkgKyAod2luZG93LmlubmVySGVpZ2h0LzIpKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYodGhpcy5wb3NZID49IHRoaXMuc3RhcnRZICYmIHRoaXMucG9zWSA8PSB0aGlzLmVuZFkpIHtcbiAgICAgICAgICAgICAgICAvLyBUZWxsIHRoZSBmcmFtZSB0byBiZSBmaXhlZCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWUuY2xhc3NMaXN0LmFkZCgnZnJhbWUtLWZpeGVkJyk7XG4gICAgICAgICAgICAgICAgLy8gQWRkIGNsYXNzIG9uIHRoZSBib2R5IGZvciBjdXN0b20gQ1NTXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdmcmFtZS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgY29sb3IgdGV4dCBpZiB0aGlzIGlzIHNtYWxsIHNjcmVlblxuICAgICAgICAgICAgICAgIGlmKHdpbmRvdy5vdXRlcldpZHRoIDwgMTAyNCkge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tY29sb3ItdGV4dCcsIHRoaXMud2hpdGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRvIGtub3cgd2hpY2ggc2VjdGlvbiB0aGUgc2Nyb2xsIGlzIG9uXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50U2VjdGlvbnMuZm9yRWFjaCgoc2VjdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5wb3NZID49IHNlY3Rpb24ub2Zmc2V0VG9wICYmIHRoaXMucG9zWSA8PSBzZWN0aW9uLm9mZnNldFRvcCArIHNlY3Rpb24ub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZVNlY3Rpb24gPSBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuYWN0aXZlU2VjdGlvbiA8IHRoaXMuY29udGVudEVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBtb3ZlIG9uIGFuIG9udGhlciBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMub2xkU2VjdGlvbiAhPT0gdGhpcy5hY3RpdmVTZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoaWRlIHRoZSBvbGQgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50RWxlbWVudHNbdGhpcy5vbGRTZWN0aW9uXS5jbGFzc0xpc3QucmVtb3ZlKCdmcmFtZS1jb250ZW50LS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBvbGQgc2VjdGlvbiBiZWNvbWVzIHRoZSBuZXcgb25lXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9sZFNlY3Rpb24gPSB0aGlzLmFjdGl2ZVNlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyB0aGUgY29udGVudFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRFbGVtZW50c1t0aGlzLmFjdGl2ZVNlY3Rpb25dLmNsYXNzTGlzdC5hZGQoJ2ZyYW1lLWNvbnRlbnQtLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmKHRoaXMucG9zWSA+IHRoaXMuZW5kWSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGZyYW1lIHBvc2l0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIEhUTUwgRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMuZnJhbWUuc3R5bGUudG9wID0gdGhpcy5lbmRZICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgZnJhbWUgcG9zaXRpb24gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgSFRNTCBFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcy5mcmFtZS5zdHlsZS50b3AgPSB0aGlzLnN0YXJ0WSArICdweCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgY2xhc3Mgb24gdGhlIGJvZHlcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2ZyYW1lLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIC8vIGhpZGUgdGhlIG9sZCBjb250ZW50XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50RWxlbWVudHNbdGhpcy5vbGRTZWN0aW9uXS5jbGFzc0xpc3QucmVtb3ZlKCdmcmFtZS1jb250ZW50LS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHRvcCBDU1MgcHJvcGVydHkgb2YgdGhlIGZyYW1lXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZS5jbGFzc0xpc3QucmVtb3ZlKCdmcmFtZS0tZml4ZWQnKTtcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgY29sb3IgdGV4dFxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1jb2xvci10ZXh0JywgdGhpcy5ibGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dGVyIG9mIHRoZSB2YXJpYWJsZSB0aGlzLnBvc1lcbiAgICAgKiBAcGFyYW0ge2ludH0gdmFsIFZhbHVlIHRoYXQgd2lsbCBiZSBzdG9ja2VkIGluIHRoZSB2YXJpYWJsZSB0aGlzLnBvc1lcbiAgICAgKi9cbiAgICBzZXRQb3NZKHZhbCkge1xuICAgICAgICB0aGlzLnBvc1kgPSB2YWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBIVE1MIEVsZW1lbnRzIG9mIHRoZSBGcmFtZSBhbmQgYWRkIHRoZW0gdG8gdGhlIG1haW5cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyB7RWxlbWVudH0gVGhlIFNWRyBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIHNjcmVlbiBmcmFtZVxuICAgICAqL1xuICAgIGNyZWF0ZUhUTUxOb2RlRnJhbWUoKSB7XG4gICAgICAgIC8vIFRoZSBkaXYgY29udGFpbmVyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZnJhbWUnKTtcblxuICAgICAgICAvLyBUaGUgZGl2IGJhY2tncm91bmRcbiAgICAgICAgY29uc3QgYmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYmcuY2xhc3NMaXN0LmFkZCgnZnJhbWVfX2JnJyk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChiZyk7XG5cbiAgICAgICAgLy8gQWRkIHRoZSBTVkdcbiAgICAgICAgY29uc3Qgc3ZnID0gYDxzdmcgdmVyc2lvbj1cIjEuMVwiIGlkPVwiTGF5ZXJfMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDM5MyA2ODBcIiBjbGFzcz1cInN2Zy1yZXNwb25zaXZlIGZyYW1lX19zdmdcIj5cbiAgICAgICAgPGcgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDAgMSlcIj48cGF0aCBmaWxsPVwiIzJCMkIyQlwiIGQ9XCJNMzUzIDBjMjIuMDkxMzkgMCA0MCAxNy45MDg2MSA0MCA0MHY1OThjMCAyMi4wOTEzOS0xNy45MDg2MSA0MC00MCA0MEg0MGMtMjIuMDkxMzkgMC00MC0xNy45MDg2MS00MC00MFY0MEMwIDE3LjkwODYxIDE3LjkwODYxIDAgNDAgMGgzMTN6bS0xMyAxOEg1NGMtMjIuMDkxMzkgMC00MCAxNy45MDg2MS00MCA0MHY1NTBjMCAyMi4wOTEzOSAxNy45MDg2MSA0MCA0MCA0MGgyODZjMjIuMDkxMzkgMCA0MC0xNy45MDg2MSA0MC00MFY1OGMwLTIyLjA5MTM5LTE3LjkwODYxLTQwLTQwLTQwelwiLz48cGF0aCBmaWxsPVwiI0Y3RjdGN1wiIGZpbGwtb3BhY2l0eT1cIi4yNVwiIGQ9XCJNMTQgNjA4YzAgMjIuMDkxMzkgMTcuOTA4NjEgNDAgNDAgNDBoMjg2YzIyLjA5MTM5IDAgNDAtMTcuOTA4NjEgNDAtNDB2MTJjMCAyMi4wOTEzOS0xNy45MDg2MSA0MC00MCA0MEg1NGMtMjIuMDkxMzkgMC00MC0xNy45MDg2MS00MC00MHpcIi8+PHJlY3Qgd2lkdGg9XCIzNjZcIiBoZWlnaHQ9XCI2MzBcIiB4PVwiMTRcIiB5PVwiMThcIiBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHJ4PVwiNDBcIi8+PC9nPlxuICAgIDwvc3ZnPmA7XG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgKz0gc3ZnO1xuXG4gICAgICAgIC8vIEFwcGVuZCB0aGUgY29udGFpbmVyIHRvIHRoZSBtYWluXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHVzZXIgaXMgb24gYW4gSXBhZFxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIHtib29sfSB0cnVlIG9yIGZhbHNlXG4gICAgICovXG4gICAgaXNJcGFkKCkge1xuICAgICAgICBpZiAoL2lQYWQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIXdpbmRvdy5NU1N0cmVhbSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufSIsImltcG9ydCBTY3JlZW5GcmFtZSBmcm9tICcuL2NvbXBvbmVudHMvU2NyZWVuRnJhbWUnO1xuaW1wb3J0IExvYWRlciBmcm9tICcuL2NvbXBvbmVudHMvTG9hZGVyJztcblxuLy8gTG9hZGVyXG5jb25zdCBsb2FkZXIgPSBuZXcgTG9hZGVyKCk7XG5sb2FkZXIuaW5pdCgpO1xuXG4vLyBXYWl0aW5nIGZvciB0aGUgcGFnZSB0byBsb2FkXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgIC8vIExhdW5jaCB0aGUgZnJhbWUgc2NyaXB0ICFcbiAgICBjb25zdCBIVE1MTm9kZUV4cGVyaWVuY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZXhwZXJpZW5jZScpO1xuICAgIGNvbnN0IHNjcmVlbkZyYW1lID0gbmV3IFNjcmVlbkZyYW1lKEhUTUxOb2RlRXhwZXJpZW5jZSk7XG4gICAgc2NyZWVuRnJhbWUuaW5pdCgpO1xuXG4gICAgLy8gUmVtb3ZlIGxvYWRlciB3aGVuIHRoZSBsb2FkaW5nIG9mIHRoZSBwYWdlIGlzIGNvbXBsZXRlXG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsb2FkZXIuZGVzdHJveSgpO1xuICAgIH0sIDUwMCk7XG59KSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdsb2FkZXInKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2xvYWRlci0taGlkZGVuJyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVyJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlci0taGlkZGVuJyk7XG4gICAgICAgIH0pXG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=